{"version":3,"sources":["config.js","store/web3Context.js","scenes/Home.jsx","App.jsx","store/web2Context.js","index.jsx"],"names":["data","Web3Context","React","createContext","web3","signer","account","loading","loadingBuy","loadingPrice","loadingCount","openSeaLink","initWeb3Modal","getPixelPrice","countLifePixel","purchasePixel","Web3ContextProvider","props","useState","setWeb3","setSigner","setAccount","setOpenSeaLink","setLoading","setLoadingPrice","setLoadingCount","setLoadingBuy","nftContract","setNftContract","nftPrice","setNftPrice","nftCount","setNftCount","useEffect","window","ethereum","on","accounts","location","reload","initContracts","provider","getSigner","ethers","Contract","NftContractAddress","NftContractArtifact","abi","a","providerOptions","walletconnect","package","WalletConnect","options","infuraId","web3Modal","Web3Modal","network","cacheProvider","connect","connected","providers","Web3Provider","getNetwork","getBalance","balance","getAddress","address","getTransactionCount","txCount","newAcc","utils","formatEther","_hex","switchNetwork","console","log","inst","request","method","params","chainId","hexlify","code","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","name","Symbol","decimals","tokenId","purchaseOfTokenIdCounter","pixelCount","toNumber","calculatePixelPrice","pixelPrice","color","callback","checkPixelPurchasableTime","weiPrice","parseEther","value","wait","then","Provider","children","Home","map","setMap","setFeaturesLayer","selectedCoord","setSelectedCoord","mapElement","useRef","mapRef","current","sourceLayer","VectorSource","wrapX","initalFeaturesLayer","VectorLayer","source","initialMap","Map","target","layers","TileLayer","OSM","TileDebug","view","View","minZoom","maxZoom","projection","center","zoom","extent","getProjection","getExtent","controls","handleMapClick","addInteraction","Draw","type","geometryFunction","createBox","event","clickedCoord","getCoordinateFromPixel","pixel","transormedCoord","transform","className","ref","toStringXY","Title","Layout","Footer","Typography","Text","styles","content","display","justifyContent","fontFamily","header","position","zIndex","width","background","padding","borderBottom","boxShadow","headerContainer","maxWidth","margin","height","alignItems","rightHeader","accountBox","boxSizing","borderRadius","lineHeight","letterSpaccing","marginRight","top","App","useContext","isLogged","style","to","level","slice","length","onClick","exact","path","Web2Context","loadingColors","nftTokens","getTokens","Web2ContextProvider","setLoadingColors","setNftTokens","fetch","config","apiColors","url","mode","credentials","headers","response","text","jsonData","JSON","parse","pixels","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87d89b2d.chunk.js","sourcesContent":["const data = {\n  \"xNum\": 100,\n  \"yNum\": 100,\n  \"paddBox\": 1,\n  \"sizeBox\": 15,\n  \"apiColors\": {\n    \"url\": \"https://colorsnft.herokuapp.com/\",\n  },\n  \"LOCAL\": {\n    \"CHAIN_ID\": 1337,\n    \"RPC\": \"http://127.0.0.1:8545\",\n    \"NATIVE_DECIMAL\": '18',\n    \"STABLE_DECIMAL\": '6',\n  },\n  \"PROD\": {\n    \"CHAIN_ID\": 80001,\n    \"RPC\": \"https://rpc-mumbai.matic.today\",\n    \"NATIVE_DECIMAL\": '18',\n    \"STABLE_DECIMAL\": '6',\n  },\n}\n\nexport default data","import React, { useEffect, useState } from \"react\";\nimport { ethers, utils } from \"ethers\";\nimport Web3Modal from \"web3modal\";\nimport CoinbaseWalletSDK from \"@coinbase/wallet-sdk\";\nimport WalletConnect from \"@walletconnect/web3-provider\";\n\nimport config from \"../config.js\";\n\nimport NftContractArtifact from \"../contracts/NftContract.json\";\nimport NftContractAddress from \"../contracts/NftContract_address.json\";\n\nconst Web3Context = React.createContext({\n    web3: null,\n    signer: null,\n    account: null,\n    loading: false,\n    loadingBuy: false,\n    loadingPrice: false,\n    loadingCount: false,\n    openSeaLink: null,\n\n    initWeb3Modal: () => { },\n    getPixelPrice: () => { },\n    countLifePixel: () => { },\n    purchasePixel: () => { },\n});\n\nexport const Web3ContextProvider = (props) => {\n    const [web3, setWeb3] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [openSeaLink, setOpenSeaLink] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [loadingPrice, setLoadingPrice] = useState(false);\n    const [loadingCount, setLoadingCount] = useState(false);\n    const [loadingBuy, setLoadingBuy] = useState(false);\n    const [nftContract, setNftContract] = useState(null);\n    const [nftPrice, setNftPrice] = useState(0);\n    const [nftCount, setNftCount] = useState(0);\n\n    // useEffect(() => {\n    //     const initUrlWeb3 = async () => {\n    //         setLoading(true)\n    //         try {\n    //             const provider = new ethers.providers.JsonRpcProvider(config.PROD.RPC);\n\n    //             setWeb3(provider);\n    //             console.log(\"No web3 instance injected, using Local web3.\");\n    //             initContracts(provider);\n    //         } catch (e) {\n    //             console.log(e);\n    //         } finally {\n    //             setLoading(false)\n    //         }\n    //     }\n\n    //     !web3 && initUrlWeb3()\n    // }, [web3]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', accounts => window.location.reload())\n            window.ethereum.on('chainChanged', () => window.location.reload())\n            //window.ethereum.on('connect', (connectInfo) => { console.log({connectInfo}); })\n        }\n    }, [])\n\n    const initContracts = (provider) => {\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(\n            NftContractAddress.Contract,\n            NftContractArtifact.abi,\n            signer);\n        setNftContract(nftContract);\n        setOpenSeaLink('https://testnets.opensea.io/assets/' + NftContractAddress.Contract + '/');\n    }\n\n    const initWeb3Modal = async () => {\n        try {\n            setLoading(true)\n            const providerOptions = {\n                // walletlink: {\n                //     package: CoinbaseWalletSDK,\n                //     options: {\n                //         appName: \"PPfinance\",\n                //         infuraId: 'ebc3a388e39840dc8313350226433c1e'\n                //     }\n                // },\n                walletconnect: {\n                    package: WalletConnect,\n                    options: {\n                        infuraId: 'ebc3a388e39840dc8313350226433c1e'\n                    }\n                }\n            };\n\n            const web3Modal = new Web3Modal({\n                network: \"matic\",\n                cacheProvider: false,// optional\n                providerOptions // required\n            });\n\n            const connected = await web3Modal.connect();\n            const provider = new ethers.providers.Web3Provider(connected);\n            const network = await provider.getNetwork();\n            const signer = provider.getSigner();\n            const balance = await signer.getBalance();\n            const address = await signer.getAddress();\n            const txCount = await signer.getTransactionCount();\n            const newAcc = {\n                balance: ethers.utils.formatEther(balance._hex),\n                address,\n                txCount,\n                network,\n            };\n            setWeb3(provider);\n            setSigner(signer);\n            setAccount(newAcc);\n            initContracts(provider);\n            await switchNetwork(connected)\n        } catch (e) {\n            console.log(e);\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const switchNetwork = async (inst) => {\n        try {\n            \n            await inst.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [{ chainId: utils.hexlify(137) }],\n            });\n        } catch (switchError) {\n            console.log(switchError)\n            // This error code indicates that the chain has not been added to MetaMask.\n            if (switchError.code === 4902) {\n                try {\n                    await inst.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: utils.hexlify(137),\n                                chainName: \"Polygon\",\n                                rpcUrls: [\"https://polygon-rpc.com/\"],\n                                blockExplorerUrls: [\"https://polygonscan.com/\"],\n                                nativeCurrency: {\n                                    name: \"MATIC\",\n                                    Symbol: \"MATIC\",\n                                    decimals: 18\n                                }\n                            },\n                        ],\n                    });\n                } catch (addError) {\n                    throw addError;\n                }\n            }\n        }\n    };\n\n    const countLifePixel = async (tokenId) => {\n        try {\n            setLoadingCount(true);\n            const pixelCount = await nftContract.purchaseOfTokenIdCounter(tokenId);\n            setNftCount(pixelCount ? pixelCount.toNumber() : 0);\n            setLoadingCount(false);\n        } catch (e) {\n            console.log(e);\n            setLoadingCount(false);\n        }\n    }\n\n    const getPixelPrice = async (tokenId) => {\n        try {\n            setLoadingPrice(true);\n            const pixelPrice = await nftContract.calculatePixelPrice(tokenId);\n            setNftPrice(utils.formatEther(pixelPrice));\n            setLoadingPrice(false);\n        } catch (e) {\n            setLoadingPrice(false);\n        }\n    }\n\n    // tokenId: number\n    // color: arrayOf(number) ex: [ 12, 23, 56 ]\n    const purchasePixel = async (tokenId, color, callback) => {\n        try {\n            //if (!nftPrice) return false;\n            setLoadingBuy(true);\n            const possiblePurchasable = await nftContract.checkPixelPurchasableTime(tokenId);\n            const weiPrice = utils.parseEther(nftPrice);\n            const tx = await nftContract.purchasePixel(tokenId, color, { value: weiPrice });\n\n            // todo manage errors\n            tx.wait().then(() => {\n                setLoadingBuy(false);\n                if (callback) callback(true);\n            });\n        }\n        catch (e) {\n            if (callback) callback(false);\n            setLoadingBuy(false);\n        }\n    }\n\n\n    return (\n        <Web3Context.Provider\n            value={{\n                web3,\n                signer,\n                loading,\n                loadingBuy,\n                loadingPrice,\n                loadingCount,\n                initWeb3Modal,\n                purchasePixel,\n                getPixelPrice,\n                countLifePixel,\n                nftPrice,\n                nftCount,\n                account,\n                openSeaLink,\n            }}>\n            {props.children}\n        </Web3Context.Provider>\n    )\n}\n\nexport default Web3Context;","import \"./style.css\"\n// import { Button, Typography, message } from \"antd\";\nimport React, { useState, useEffect, useRef } from 'react';\n// import Web3Context from \"../store/web3Context\";\n// import Web2Context from \"../store/web2Context\";\n// import SvgMap from \"../components/SvgMap\";\n// import NftView from \"../components/NftView\";\n// import { coordToTokenId } from \"../utils\";\n// import config from \"../config.js\";\n\n\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport VectorLayer from 'ol/layer/Vector'\n// import VectorSource from 'ol/source/Vector'\nimport XYZ from 'ol/source/XYZ'\nimport {transform} from 'ol/proj'\nimport {toStringXY} from 'ol/coordinate';\nimport Draw, { createBox } from \"ol/interaction/Draw\";\nimport { defaults as defaultControls } from \"ol/control\";\nimport { OSM, Vector as VectorSource, TileDebug } from \"ol/source\";\n\nfunction Home(props) {\n\n  // set intial state\n  const [ map, setMap ] = useState()\n  const [ featuresLayer, setFeaturesLayer ] = useState()\n  const [ selectedCoord , setSelectedCoord ] = useState()\n\n  // pull refs\n  const mapElement = useRef()\n  \n  // create state ref that can be accessed in OpenLayers onclick callback function\n  //  https://stackoverflow.com/a/60643670\n  const mapRef = useRef()\n  mapRef.current = map\n\n  // initialize map on first render - logic formerly put into componentDidMount\n  useEffect( () => {\n\n    const sourceLayer = new VectorSource({ wrapX: false });\n    // create and add vector source layer\n    const initalFeaturesLayer = new VectorLayer({\n      source: sourceLayer\n    })\n\n    // create map\n    const initialMap = new Map({\n      target: mapElement.current,\n      layers: [\n        new TileLayer({\n          source: new OSM()\n        }),\n        new TileLayer({\n          source: new TileDebug()\n        }),\n        initalFeaturesLayer\n      ],\n      view: new View({\n        minZoom: 3,\n        maxZoom: 11,\n        projection: 'EPSG:3857',\n        center: [0, 0],\n        zoom: 2,\n        extent: new View().getProjection().getExtent()\n      }),\n      controls: []\n    })\n\n    // set map onclick handler\n    initialMap.on('click', handleMapClick)\n\n    // save map and vector layer references to state\n    setMap(initialMap)\n    setFeaturesLayer(initalFeaturesLayer)\n\n    initialMap.addInteraction(new Draw({\n      source: sourceLayer,\n      type: \"Circle\",\n      geometryFunction: createBox()\n    }));\n\n  },[])\n\n  // map click handler\n  const handleMapClick = (event) => {\n  console.log(event)    \n    // get clicked coordinate using mapRef to access current React state inside OpenLayers callback\n    //  https://stackoverflow.com/a/60643670\n    const clickedCoord = mapRef.current.getCoordinateFromPixel(event.pixel);\n\n    // transform coord to EPSG 4326 standard Lat Long\n    const transormedCoord = transform(clickedCoord, 'EPSG:3857', 'EPSG:4326')\n\n    // set React state\n    setSelectedCoord( transormedCoord )\n    \n  }\n\n  // render component\n  return (      \n    <div className='App'>\n      \n      <div ref={mapElement} className=\"map-container\"></div>\n      \n      <div className=\"clicked-coord-label\">\n        <p>{ (selectedCoord) ? toStringXY(selectedCoord, 5) : '' }</p>\n      </div>\n\n    </div>\n  ) \n\n}\n\nexport default Home\n\n// export default function Home(props) {\n//   const [visible, setVisible] = useState(false);\n//   const [tokenId, setTokenId] = useState(null);\n\n//   const {\n//       initWeb3Modal,\n//       loading,\n//       loadingBuy,\n//       loadingPrice,\n//       loadingCount,\n//       nftPrice,\n//       nftCount,\n//       countLifePixel,\n//       getPixelPrice,\n//       purchasePixel,\n//       openSeaLink,\n//   } = useContext(Web3Context);\n\n//   const {\n//       loadingColors,\n//       nftTokens,\n//       getTokens,\n//   } = useContext(Web2Context);\n\n//   // Get Colors Pixels\n//   useEffect(() => {\n//     if (!nftTokens) {\n//       getTokens();\n//     }\n//   }, [])\n\n//   const handleClickPixel = (coord) => {\n//     const tkId = coordToTokenId(coord.x, coord.y, config.xNum);\n//     setTokenId(tkId);\n//     getPixelPrice(tkId);\n//     countLifePixel(tkId);\n//     setVisible(true);\n//   }\n\n//   const successBuy = async (success) => {\n//     if (success)\n//       message.success('You successfully get this token.');\n//     else\n//       message.error('A error happened. Do you have enough in your balance ?');\n//     setVisible(false);\n\n//     // update grid\n//     getTokens();\n//   }\n\n//   const confirmBuy = (color) => {\n//     purchasePixel(tokenId, color, successBuy);\n//   }\n\n//   return (\n//     <div\n//       style={{\n//         display: \"flex\",\n//         flexDirection: \"column\",\n//         width: \"100%\",\n//         minHeight: '70vh',\n//       }}\n//     >\n//       {props.isLogged && visible && \n//         <NftView \n//           tokenId={tokenId}\n//           loading={loadingBuy}\n//           visible={visible}\n//           setVisible={setVisible}\n//           confirmBuy={confirmBuy}\n//           nftPrice={nftPrice}\n//           loadingPrice={loadingPrice}\n//           nftCount={nftCount}\n//           loadingCount={loadingCount}\n//           openSeaLink={openSeaLink}\n//         />}\n\n//       {!loading && (\n//         <>\n//           <SvgMap\n//             width={window.innerWidth}\n//             height={window.innerHeight - 50}\n//             sizeBox={config.sizeBox}\n//             paddBox={config.paddBox}\n//             xNum={config.xNum}\n//             yNum={config.yNum}\n//             onClick={handleClickPixel}\n//             reload={getTokens}\n//             loading={loadingColors}\n//             nftTokens={nftTokens}\n//           />\n//         </>\n//       )}\n      \n//       {loading && (\n//         <Button type=\"primary\" style={{ margin: 'auto' }} loading>\n//           Loading\n//         </Button>\n//       )}\n//     </div>\n//   );\n// }\n","import React, { useContext } from 'react';\r\nimport Web3Context from \"./store/web3Context\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport { Button, Layout, Typography } from \"antd\";\r\n\r\nimport Home from \"./scenes/Home\";\r\n\r\nconst { Footer } = Layout;\r\nconst { Text, Title } = Typography;\r\n\r\nconst styles = {\r\n  content: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n    color: \"#041836\",\r\n  },\r\n  header: {\r\n    position: \"relative\",\r\n    zIndex: 1,\r\n    width: \"100%\",\r\n    background: \"#fff\",\r\n    padding: 0,\r\n    borderBottom: \"2px solid rgba(0, 0, 0, 0.06)\",\r\n    boxShadow: \"0 1px 10px rgb(151 164 175 / 10%)\",\r\n  },\r\n  headerContainer: {\r\n    maxWidth: '1056px',\r\n    padding: '0 16px',\r\n    margin: 'auto',\r\n    display: \"flex\",\r\n    height: '100%',\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n  },\r\n  rightHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  accountBox: {\r\n    background: '#333',\r\n    color: 'white',\r\n    padding: '0 14px',\r\n    boxSizing: 'border-box',\r\n    borderRadius: '13px',\r\n    lineHeight: '35px',\r\n    letterSpaccing: '1px',\r\n    marginRight: '2px',\r\n    position: 'relative',\r\n    top: '8px',\r\n  },\r\n};\r\n\r\nfunction App() {\r\n  const {\r\n    initWeb3Modal,\r\n    web3,\r\n    signer,\r\n    account,\r\n  } = useContext(Web3Context);\r\n  const isLogged = (web3 && signer);\r\n\r\n  return (\r\n    <Layout>\r\n      <Router>\r\n        <div style={styles.header}>\r\n          <div style={styles.headerContainer}>\r\n            <Link to=\"/\" style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <Title style={{ lineHeight: '35px', margin: 0 }} level={5}>Logo</Title>\r\n            </Link>\r\n            <div style={styles.rightHeader}>\r\n              {account && <p style={styles.accountBox}>\r\n                {account.network.name} - {account.network.chainId}\r\n              </p>}\r\n              {account && <p style={styles.accountBox}>\r\n                {account.address.slice(0, 5) + '...' + account.address.slice(account.address.length - 5, account.address.length)}\r\n              </p>}\r\n              {!account &&\r\n                <Button type=\"primary\" style={{ margin: '10px auto', maxWidth: '180px' }} onClick={initWeb3Modal}>Connect your Wallet</Button>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={styles.content} >\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home isLogged={isLogged} />\r\n            </Route>\r\n            <Route path=\"/nonauthenticated\">\r\n              <>Please login using the \"Authenticate\" button</>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, {useState} from \"react\";\n\nimport config from \"../config.js\";\n\nconst Web2Context = React.createContext({\n    loadingColors: false,\n    //errorColors: false,\n    nftTokens: null,\n\n    getTokens: () => {},\n});\n\nexport const Web2ContextProvider = (props) => {\n    const [loadingColors, setLoadingColors] = useState(false);\n    //const [errorColors, setErrorColors] = useState(false);\n    const [nftTokens, setNftTokens] = useState(null);\n\n\tconst getTokens = async () => {\n\t\tsetLoadingColors(true);\n\t\tlet response = await fetch(\n\t\t\tconfig.apiColors.url,\n\t\t\t{\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: 'same-origin',\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tconst data = await response.text();\n    \tconst jsonData = JSON.parse(data);\n    \tif (jsonData.pixels)\n    \t\tsetNftTokens(jsonData.pixels);\n\t\tsetLoadingColors(false);\n    }\n\n    return (\n        <Web2Context.Provider\n            value={{\n                loadingColors,\n                //errorColors,\n                nftTokens,\n                getTokens,\n            }}>\n            {props.children}\n        </Web2Context.Provider>\n    )\n}\n\nexport default Web2Context;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Web3ContextProvider} from \"./store/web3Context\";\nimport {Web2ContextProvider} from \"./store/web2Context\";\n\nReactDOM.render(\n  <>\n    <Web3ContextProvider>\n      <Web2ContextProvider>\n        <App />\n      </Web2ContextProvider>\n    </Web3ContextProvider>\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}