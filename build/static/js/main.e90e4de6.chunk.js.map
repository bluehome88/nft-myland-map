{"version":3,"sources":["store/web3Context.js","components/NftView.jsx","scenes/Home.jsx","App.jsx","config.js","store/web2Context.js","index.jsx"],"names":["Web3Context","React","createContext","web3","signer","account","loading","loadingBuy","loadingPrice","loadingCount","openSeaLink","initWeb3Modal","getPixelPrice","countLifePixel","purchasePixel","Web3ContextProvider","props","useState","setWeb3","setSigner","setAccount","setOpenSeaLink","setLoading","setLoadingPrice","setLoadingCount","setLoadingBuy","nftContract","setNftContract","nftPrice","setNftPrice","nftCount","setNftCount","useEffect","window","ethereum","on","accounts","location","reload","initContracts","provider","getSigner","ethers","Contract","NftContractAddress","NftContractArtifact","abi","a","providerOptions","walletconnect","package","WalletConnect","options","infuraId","web3Modal","Web3Modal","network","cacheProvider","connect","connected","providers","Web3Provider","getNetwork","getBalance","balance","getAddress","address","getTransactionCount","txCount","newAcc","utils","formatEther","_hex","switchNetwork","console","log","inst","request","method","params","chainId","hexlify","code","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","name","Symbol","decimals","tokenId","purchaseOfTokenIdCounter","pixelCount","toNumber","calculatePixelPrice","pixelPrice","color","callback","weiPrice","parseEther","value","wait","then","Provider","children","Step","Steps","NftView","useColor","setColor","isBuy","setIsBuy","current","setCurrent","handleConfirm","rgbArr","rgb","r","g","b","confirmBuy","steps","title","content","width","height","onChange","hideHSV","dark","hex","style","right","position","top","bottom","bodyStyle","visible","onCancel","setVisible","footer","Icon","component","LoadingOutlined","href","marginTop","type","onClick","map","item","className","length","margin","Home","setMap","selectedCoord","setSelectedCoord","mapElement","useRef","mapRef","points","count","i","j","Feature","Point","pointsSource","VectorSource","features","wrapX","pointsLayer","VectorLayer","source","Style","image","CircleStyle","radius","fill","Fill","initialMap","Map","target","layers","TileLayer","OSM","view","View","minZoom","maxZoom","center","zoom","extent","getProjection","getExtent","controls","handleMapClick","draw","Draw","geometryFunction","createBox","ev","getFeatures","lastFeature","removeFeature","addInteraction","snap","Snap","pixelTolerance","event","clickedCoord","getCoordinateFromPixel","pixel","ref","toStringXY","isLogged","Title","Typography","styles","display","justifyContent","fontFamily","header","zIndex","background","padding","borderBottom","boxShadow","headerContainer","maxWidth","alignItems","rightHeader","accountBox","boxSizing","borderRadius","lineHeight","letterSpaccing","marginRight","App","useContext","to","level","slice","exact","path","data","Web2Context","loadingColors","nftTokens","getTokens","Web2ContextProvider","setLoadingColors","setNftTokens","fetch","config","apiColors","url","mode","credentials","headers","response","text","jsonData","JSON","parse","pixels","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e90e4de6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers, utils } from \"ethers\";\nimport Web3Modal from \"web3modal\";\n// import CoinbaseWalletSDK from \"@coinbase/wallet-sdk\";\nimport WalletConnect from \"@walletconnect/web3-provider\";\n\n// import config from \"../config.js\";\n\nimport NftContractArtifact from \"../contracts/NftContract.json\";\nimport NftContractAddress from \"../contracts/NftContract_address.json\";\n\nconst Web3Context = React.createContext({\n    web3: null,\n    signer: null,\n    account: null,\n    loading: false,\n    loadingBuy: false,\n    loadingPrice: false,\n    loadingCount: false,\n    openSeaLink: null,\n\n    initWeb3Modal: () => { },\n    getPixelPrice: () => { },\n    countLifePixel: () => { },\n    purchasePixel: () => { },\n});\n\nexport const Web3ContextProvider = (props) => {\n    const [web3, setWeb3] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [openSeaLink, setOpenSeaLink] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [loadingPrice, setLoadingPrice] = useState(false);\n    const [loadingCount, setLoadingCount] = useState(false);\n    const [loadingBuy, setLoadingBuy] = useState(false);\n    const [nftContract, setNftContract] = useState(null);\n    const [nftPrice, setNftPrice] = useState(0);\n    const [nftCount, setNftCount] = useState(0);\n\n    // useEffect(() => {\n    //     const initUrlWeb3 = async () => {\n    //         setLoading(true)\n    //         try {\n    //             const provider = new ethers.providers.JsonRpcProvider(config.PROD.RPC);\n\n    //             setWeb3(provider);\n    //             console.log(\"No web3 instance injected, using Local web3.\");\n    //             initContracts(provider);\n    //         } catch (e) {\n    //             console.log(e);\n    //         } finally {\n    //             setLoading(false)\n    //         }\n    //     }\n\n    //     !web3 && initUrlWeb3()\n    // }, [web3]);\n\n    useEffect(() => {\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', accounts => window.location.reload())\n            window.ethereum.on('chainChanged', () => window.location.reload())\n            //window.ethereum.on('connect', (connectInfo) => { console.log({connectInfo}); })\n        }\n    }, [])\n\n    const initContracts = (provider) => {\n        const signer = provider.getSigner();\n        const nftContract = new ethers.Contract(\n            NftContractAddress.Contract,\n            NftContractArtifact.abi,\n            signer);\n        setNftContract(nftContract);\n        setOpenSeaLink('https://testnets.opensea.io/assets/' + NftContractAddress.Contract + '/');\n    }\n\n    const initWeb3Modal = async () => {\n        try {\n            setLoading(true)\n            const providerOptions = {\n                // walletlink: {\n                //     package: CoinbaseWalletSDK,\n                //     options: {\n                //         appName: \"PPfinance\",\n                //         infuraId: 'ebc3a388e39840dc8313350226433c1e'\n                //     }\n                // },\n                walletconnect: {\n                    package: WalletConnect,\n                    options: {\n                        infuraId: 'ebc3a388e39840dc8313350226433c1e'\n                    }\n                }\n            };\n\n            const web3Modal = new Web3Modal({\n                network: \"matic\",\n                cacheProvider: false,// optional\n                providerOptions // required\n            });\n\n            const connected = await web3Modal.connect();\n            const provider = new ethers.providers.Web3Provider(connected);\n            const network = await provider.getNetwork();\n            const signer = provider.getSigner();\n            const balance = await signer.getBalance();\n            const address = await signer.getAddress();\n            const txCount = await signer.getTransactionCount();\n            const newAcc = {\n                balance: ethers.utils.formatEther(balance._hex),\n                address,\n                txCount,\n                network,\n            };\n            setWeb3(provider);\n            setSigner(signer);\n            setAccount(newAcc);\n            initContracts(provider);\n            await switchNetwork(connected)\n        } catch (e) {\n            console.log(e);\n        } finally {\n            setLoading(false)\n        }\n    }\n\n    const switchNetwork = async (inst) => {\n        try {\n            \n            await inst.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [{ chainId: utils.hexlify(137) }],\n            });\n        } catch (switchError) {\n            console.log(switchError)\n            // This error code indicates that the chain has not been added to MetaMask.\n            if (switchError.code === 4902) {\n                try {\n                    await inst.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: utils.hexlify(137),\n                                chainName: \"Polygon\",\n                                rpcUrls: [\"https://polygon-rpc.com/\"],\n                                blockExplorerUrls: [\"https://polygonscan.com/\"],\n                                nativeCurrency: {\n                                    name: \"MATIC\",\n                                    Symbol: \"MATIC\",\n                                    decimals: 18\n                                }\n                            },\n                        ],\n                    });\n                } catch (addError) {\n                    throw addError;\n                }\n            }\n        }\n    };\n\n    const countLifePixel = async (tokenId) => {\n        try {\n            setLoadingCount(true);\n            const pixelCount = await nftContract.purchaseOfTokenIdCounter(tokenId);\n            setNftCount(pixelCount ? pixelCount.toNumber() : 0);\n            setLoadingCount(false);\n        } catch (e) {\n            console.log(e);\n            setLoadingCount(false);\n        }\n    }\n\n    const getPixelPrice = async (tokenId) => {\n        try {\n            setLoadingPrice(true);\n            const pixelPrice = await nftContract.calculatePixelPrice(tokenId);\n            setNftPrice(utils.formatEther(pixelPrice));\n            setLoadingPrice(false);\n        } catch (e) {\n            setLoadingPrice(false);\n        }\n    }\n\n    // tokenId: number\n    // color: arrayOf(number) ex: [ 12, 23, 56 ]\n    const purchasePixel = async (tokenId, color, callback) => {\n        try {\n            //if (!nftPrice) return false;\n            setLoadingBuy(true);\n            // const possiblePurchasable = await nftContract.checkPixelPurchasableTime(tokenId);\n            const weiPrice = utils.parseEther(nftPrice);\n            const tx = await nftContract.purchasePixel(tokenId, color, { value: weiPrice });\n\n            // todo manage errors\n            tx.wait().then(() => {\n                setLoadingBuy(false);\n                if (callback) callback(true);\n            });\n        }\n        catch (e) {\n            if (callback) callback(false);\n            setLoadingBuy(false);\n        }\n    }\n\n\n    return (\n        <Web3Context.Provider\n            value={{\n                web3,\n                signer,\n                loading,\n                loadingBuy,\n                loadingPrice,\n                loadingCount,\n                initWeb3Modal,\n                purchasePixel,\n                getPixelPrice,\n                countLifePixel,\n                nftPrice,\n                nftCount,\n                account,\n                openSeaLink,\n            }}>\n            {props.children}\n        </Web3Context.Provider>\n    )\n}\n\nexport default Web3Context;","import React from 'react';\nimport { ColorPicker, useColor } from \"react-color-palette\";\nimport { Steps, Modal, Button, Typography } from 'antd';\nimport Icon, { LoadingOutlined } from '@ant-design/icons';\nimport \"react-color-palette/lib/css/styles.css\";\nimport \"./NftView.css\";\n\nconst { Step } = Steps;\n\n// props.tokenId\n// props.confirmBuy\n// props.visible\n// props.setVisible\n// props.loading\n// props.nftPrice\n// props.loadingPrice\n// props.nftCount\n// props.loadingCount\n// props.openSeaLink\nfunction NftView(props) {\n\tconst [color, setColor] = useColor(\"hex\", \"#121212\");\n\tconst [isBuy, setIsBuy] = React.useState(false);\n\tconst [current, setCurrent] = React.useState(0);\n\tconst next = () => {\n\t\tsetCurrent(current + 1);\n\t};\n\n\tconst prev = () => {\n\t\tsetCurrent(current - 1);\n\t};\n\n\tconst handleConfirm = async () => {\n\t\tconst rgbArr = [\n\t\t\tcolor.rgb.r,\n\t\t\tcolor.rgb.g,\n\t\t\tcolor.rgb.b,\n\t\t];\n\t\tawait props.confirmBuy(rgbArr);\n\t}\n\n\tconst steps = [\n\t\t{\n\t\t\ttitle: 'Choose a color',\n\t\t\tcontent: <ColorPicker width={456} height={228} color={color} onChange={setColor} hideHSV dark />,\n\t\t},\n\t\t{\n\t\t\ttitle: 'Confirm',\n\t\t\tcontent: (\n\t\t\t\t<>\n\t\t\t\t\t<Typography>Color choosed: {color.hex}</Typography>\n\t\t\t\t</>\n\t\t\t),\n\t\t},\n\t];\n\n\treturn (\n\t\t<Modal\n\t\t\ttitle={'Token n°' + props.tokenId}\n\t\t\tstyle={{\n\t\t\t\tright: 0,\n\t\t\t\twidth: '50%',\n\t\t\t\tposition: 'fixed',\n\t\t\t\ttop: 0,\n\t\t\t\tbottom: 0,\n\t\t\t}}\n\t\t\tbodyStyle={{ height: 'calc(100vh - 68px)' }}\n\t\t\tvisible={props.visible}\n\t\t\tonCancel={() => props.setVisible(false)}\n\t\t\tfooter={[]}\n\t\t>\n\t\t\t{props.loading && <div>\n\t\t\t\t<Icon component={LoadingOutlined} />\n\t\t\t\t<Typography>Careful, processing on chain, can take severals seconds...</Typography>\n\t\t\t</div>}\n\t\t\t{!props.loading && \n\t\t\t\t<>\n\t\t\t\t\t{!isBuy && <div>\n\t\t\t\t\t\t<Typography>Price: {props.loadingPrice ? <Icon component={LoadingOutlined} /> : props.nftPrice + 'ETH'}</Typography>\n\t\t\t\t\t\t<Typography>How many owner(s) get this NFT ?: {props.loadingCount ? <Icon component={LoadingOutlined} /> : props.nftCount}</Typography>\n\t\t\t\t\t\t{props.nftCount && props.openSeaLink ? <Typography>Check it on <a href={props.openSeaLink + props.tokenId}>OpenSea</a></Typography> : null}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<Typography style={{ marginTop: '10px' }}>Want it ?</Typography>\n\t\t\t\t\t\t<Button style={{ width: '100%' }} type=\"primary\" onClick={!props.loadingPrice && !props.loadingCount ? () => setIsBuy(true) : () => {}}>\n\t\t\t\t\t\t\t{!props.loadingPrice && !props.loadingCount ? 'Buy it' : <Icon component={LoadingOutlined} />}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Typography>Limitation: 1 buy by minute.</Typography>\n\t\t\t\t\t</div>}\n\n\t\t\t\t\t{isBuy && <>\n\t\t\t\t\t\t\t<Steps current={current}>\n\t\t\t\t\t\t\t\t{steps.map(item => (\n\t\t\t\t\t\t\t\t\t<Step key={item.title} title={item.title} />\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</Steps>\n\t\t\t\t\t\t\t<div className=\"steps-content\">{steps[current].content}</div>\n\n\n\t\t\t\t\t\t\t<div className=\"steps-action\">\n\t\t\t\t\t\t\t\t{current < steps.length - 1 && (\n\t\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={() => next()}>\n\t\t\t\t\t\t\t\t\t\tNext\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{current === steps.length - 1 && (\n\t\t\t\t\t\t\t\t\t<Button type=\"primary\" onClick={() => handleConfirm()}>\n\t\t\t\t\t\t\t\t\t\tConfirm\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t{current > 0 && (\n\t\t\t\t\t\t\t\t\t<Button style={{ margin: '0 8px' }} onClick={() => prev()}>\n\t\t\t\t\t\t\t\t\t\tPrevious\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t}\n\t\t</Modal>\n\t);\n}\n\nexport default NftView;\n","import \"./style.css\"\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport Map from 'ol/Map'\r\nimport View from 'ol/View'\r\nimport TileLayer from 'ol/layer/Tile'\r\nimport VectorLayer from 'ol/layer/Vector'\r\nimport {toStringXY} from 'ol/coordinate';\r\nimport Draw, { createBox } from \"ol/interaction/Draw\";\r\nimport { Snap } from 'ol/interaction';\r\nimport Feature from 'ol/Feature';\r\nimport { Circle as CircleStyle, Fill, Style } from 'ol/style';\r\nimport { Point } from 'ol/geom';\r\nimport { OSM, Vector as VectorSource } from \"ol/source\";\r\nimport NftView from \"../components/NftView\";\r\n\r\n// import Web3Context from \"../store/web3Context\";\r\n// import Web2Context from \"../store/web2Context\";\r\n// import SvgMap from \"../components/SvgMap\";\r\n// import { coordToTokenId } from \"../utils\";\r\n// import config from \"../config.js\";\r\n// import { Button, Typography, message } from \"antd\";\r\n\r\nfunction Home(props) {\r\n  const [ map, setMap ] = useState()\r\n  const [ selectedCoord , setSelectedCoord ] = useState()\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const mapElement = useRef()\r\n  const mapRef = useRef()\r\n  mapRef.current = map\r\n  \r\n  useEffect( () => {\r\n    const points = [];\r\n    let count = 0;\r\n    for (let i = -20000000; i <= 20000000; i += 200000) {\r\n      for (let j = -20000000; j <= 20000000; j += 200000) {\r\n        points[count] = new Feature({\r\n          'geometry': new Point([i, j])\r\n        });\r\n        count++;\r\n      }\r\n    }\r\n    const pointsSource = new VectorSource({\r\n      features: points,\r\n      wrapX: false,\r\n    });\r\n    const pointsLayer = new VectorLayer({\r\n      source: pointsSource,\r\n      style: new Style({\r\n        image: new CircleStyle({\r\n          radius: 1,\r\n          fill: new Fill({ color: '#ff0000' }),\r\n        }),\r\n      })\r\n    });\r\n\r\n    const initialMap = new Map({\r\n      target: mapElement.current,\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        }),\r\n        pointsLayer\r\n      ],\r\n      view: new View({\r\n        minZoom: 3,\r\n        maxZoom: 11,\r\n        center: [0, 0],\r\n        zoom: 3,\r\n        extent: new View().getProjection().getExtent()\r\n      }),\r\n      controls: []\r\n    })\r\n    setMap(initialMap)\r\n    initialMap.on('pointermove', handleMapClick)\r\n\r\n    const draw = new Draw({\r\n      source: pointsSource,\r\n      type: \"Circle\",\r\n      geometryFunction: createBox()\r\n    })\r\n    draw.on('drawend', function (ev) {\r\n      const features = pointsLayer.getFeatures()\r\n      var lastFeature = features[features.length - 1];\r\n      pointsLayer.removeFeature(lastFeature);\r\n      console.log(ev)\r\n      setVisible(true)\r\n    })\r\n    initialMap.addInteraction(draw);\r\n\r\n    const snap = new Snap({\r\n      source: pointsSource,\r\n      pixelTolerance: 100\r\n    });\r\n    initialMap.addInteraction(snap);   \r\n  },[])\r\n\r\n  const handleMapClick = (event) => {\r\n    const clickedCoord = mapRef.current.getCoordinateFromPixel(event.pixel);\r\n    setSelectedCoord(clickedCoord)\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <div ref={mapElement} className=\"map-container\"></div>\r\n      <div className=\"clicked-coord-label\">\r\n        <p>{ (selectedCoord) ? toStringXY(selectedCoord, 5) : '' }</p>\r\n        {props.isLogged && visible &&\r\n          <NftView\r\n            tokenId={1}\r\n            loading={1}\r\n            visible={visible}\r\n            setVisible={setVisible}\r\n            confirmBuy={console.log(123)}\r\n            nftPrice={1}\r\n            loadingPrice={1}\r\n            nftCount={2}\r\n            loadingCount={1}\r\n            openSeaLink=\"12\"\r\n          />}\r\n      </div>\r\n    </div>\r\n  ) \r\n}\r\n\r\nexport default Home\r\n\r\n// export default function Home(props) {\r\n//   const [visible, setVisible] = useState(false);\r\n//   const [tokenId, setTokenId] = useState(null);\r\n\r\n//   const {\r\n//       initWeb3Modal,\r\n//       loading,\r\n//       loadingBuy,\r\n//       loadingPrice,\r\n//       loadingCount,\r\n//       nftPrice,\r\n//       nftCount,\r\n//       countLifePixel,\r\n//       getPixelPrice,\r\n//       purchasePixel,\r\n//       openSeaLink,\r\n//   } = useContext(Web3Context);\r\n\r\n//   const {\r\n//       loadingColors,\r\n//       nftTokens,\r\n//       getTokens,\r\n//   } = useContext(Web2Context);\r\n\r\n//   // Get Colors Pixels\r\n//   useEffect(() => {\r\n//     if (!nftTokens) {\r\n//       getTokens();\r\n//     }\r\n//   }, [])\r\n\r\n//   const handleClickPixel = (coord) => {\r\n//     const tkId = coordToTokenId(coord.x, coord.y, config.xNum);\r\n//     setTokenId(tkId);\r\n//     getPixelPrice(tkId);\r\n//     countLifePixel(tkId);\r\n//     setVisible(true);\r\n//   }\r\n\r\n//   const successBuy = async (success) => {\r\n//     if (success)\r\n//       message.success('You successfully get this token.');\r\n//     else\r\n//       message.error('A error happened. Do you have enough in your balance ?');\r\n//     setVisible(false);\r\n\r\n//     // update grid\r\n//     getTokens();\r\n//   }\r\n\r\n//   const confirmBuy = (color) => {\r\n//     purchasePixel(tokenId, color, successBuy);\r\n//   }\r\n\r\n//   return (\r\n//     <div\r\n//       style={{\r\n//         display: \"flex\",\r\n//         flexDirection: \"column\",\r\n//         width: \"100%\",\r\n//         minHeight: '70vh',\r\n//       }}\r\n//     >\r\n//       {props.isLogged && visible && \r\n//         <NftView \r\n//           tokenId={tokenId}\r\n//           loading={loadingBuy}\r\n//           visible={visible}\r\n//           setVisible={setVisible}\r\n//           confirmBuy={confirmBuy}\r\n//           nftPrice={nftPrice}\r\n//           loadingPrice={loadingPrice}\r\n//           nftCount={nftCount}\r\n//           loadingCount={loadingCount}\r\n//           openSeaLink={openSeaLink}\r\n//         />}\r\n\r\n//       {!loading && (\r\n//         <>\r\n//           <SvgMap\r\n//             width={window.innerWidth}\r\n//             height={window.innerHeight - 50}\r\n//             sizeBox={config.sizeBox}\r\n//             paddBox={config.paddBox}\r\n//             xNum={config.xNum}\r\n//             yNum={config.yNum}\r\n//             onClick={handleClickPixel}\r\n//             reload={getTokens}\r\n//             loading={loadingColors}\r\n//             nftTokens={nftTokens}\r\n//           />\r\n//         </>\r\n//       )}\r\n      \r\n//       {loading && (\r\n//         <Button type=\"primary\" style={{ margin: 'auto' }} loading>\r\n//           Loading\r\n//         </Button>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n","import React, { useContext } from 'react';\r\nimport Web3Context from \"./store/web3Context\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n} from \"react-router-dom\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport { Button, Layout, Typography } from \"antd\";\r\n\r\nimport Home from \"./scenes/Home\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst styles = {\r\n  content: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n    color: \"#041836\",\r\n  },\r\n  header: {\r\n    position: \"relative\",\r\n    zIndex: 1,\r\n    width: \"100%\",\r\n    background: \"#fff\",\r\n    padding: 0,\r\n    borderBottom: \"2px solid rgba(0, 0, 0, 0.06)\",\r\n    boxShadow: \"0 1px 10px rgb(151 164 175 / 10%)\",\r\n  },\r\n  headerContainer: {\r\n    maxWidth: '1056px',\r\n    padding: '0 16px',\r\n    margin: 'auto',\r\n    display: \"flex\",\r\n    height: '100%',\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n  },\r\n  rightHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  accountBox: {\r\n    background: '#333',\r\n    color: 'white',\r\n    padding: '0 14px',\r\n    boxSizing: 'border-box',\r\n    borderRadius: '13px',\r\n    lineHeight: '35px',\r\n    letterSpaccing: '1px',\r\n    marginRight: '2px',\r\n    position: 'relative',\r\n    top: '8px',\r\n  },\r\n};\r\n\r\nfunction App() {\r\n  const {\r\n    initWeb3Modal,\r\n    web3,\r\n    signer,\r\n    account,\r\n  } = useContext(Web3Context);\r\n  const isLogged = (web3 && signer);\r\n\r\n  return (\r\n    <Layout>\r\n      <Router>\r\n        <div style={styles.header}>\r\n          <div style={styles.headerContainer}>\r\n            <Link to=\"/\" style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <Title style={{ lineHeight: '35px', margin: 0 }} level={5}>Logo</Title>\r\n            </Link>\r\n            <div style={styles.rightHeader}>\r\n              {account && <p style={styles.accountBox}>\r\n                {account.network.name} - {account.network.chainId}\r\n              </p>}\r\n              {account && <p style={styles.accountBox}>\r\n                {account.address.slice(0, 5) + '...' + account.address.slice(account.address.length - 5, account.address.length)}\r\n              </p>}\r\n              {!account &&\r\n                <Button type=\"primary\" style={{ margin: '10px auto', maxWidth: '180px' }} onClick={initWeb3Modal}>Connect your Wallet</Button>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div style={styles.content} >\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home isLogged={isLogged} />\r\n            </Route>\r\n            <Route path=\"/nonauthenticated\">\r\n              <>Please login using the \"Authenticate\" button</>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const data = {\n  \"xNum\": 100,\n  \"yNum\": 100,\n  \"paddBox\": 1,\n  \"sizeBox\": 15,\n  \"apiColors\": {\n    \"url\": \"https://colorsnft.herokuapp.com/\",\n  },\n  \"LOCAL\": {\n    \"CHAIN_ID\": 1337,\n    \"RPC\": \"http://127.0.0.1:8545\",\n    \"NATIVE_DECIMAL\": '18',\n    \"STABLE_DECIMAL\": '6',\n  },\n  \"PROD\": {\n    \"CHAIN_ID\": 80001,\n    \"RPC\": \"https://rpc-mumbai.matic.today\",\n    \"NATIVE_DECIMAL\": '18',\n    \"STABLE_DECIMAL\": '6',\n  },\n}\n\nexport default data","import React, {useState} from \"react\";\n\nimport config from \"../config.js\";\n\nconst Web2Context = React.createContext({\n    loadingColors: false,\n    //errorColors: false,\n    nftTokens: null,\n\n    getTokens: () => {},\n});\n\nexport const Web2ContextProvider = (props) => {\n    const [loadingColors, setLoadingColors] = useState(false);\n    //const [errorColors, setErrorColors] = useState(false);\n    const [nftTokens, setNftTokens] = useState(null);\n\n\tconst getTokens = async () => {\n\t\tsetLoadingColors(true);\n\t\tlet response = await fetch(\n\t\t\tconfig.apiColors.url,\n\t\t\t{\n\t\t\t\tmode: 'cors',\n\t\t\t\tcredentials: 'same-origin',\n\t\t\t\theaders: {\n\t\t\t\t\t'Accept': 'application/json',\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t},\n\t\t\t},\n\t\t);\n\t\tconst data = await response.text();\n    \tconst jsonData = JSON.parse(data);\n    \tif (jsonData.pixels)\n    \t\tsetNftTokens(jsonData.pixels);\n\t\tsetLoadingColors(false);\n    }\n\n    return (\n        <Web2Context.Provider\n            value={{\n                loadingColors,\n                //errorColors,\n                nftTokens,\n                getTokens,\n            }}>\n            {props.children}\n        </Web2Context.Provider>\n    )\n}\n\nexport default Web2Context;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Web3ContextProvider} from \"./store/web3Context\";\nimport {Web2ContextProvider} from \"./store/web2Context\";\n\nReactDOM.render(\n  <>\n    <Web3ContextProvider>\n      <Web2ContextProvider>\n        <App />\n      </Web2ContextProvider>\n    </Web3ContextProvider>\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}